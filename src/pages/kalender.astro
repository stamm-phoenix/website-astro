---
// filepath: src/pages/kalendar.astro
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

const ICS_URL = 'https://kalender.stamm-phoenix.de/aktionen.ics';

// Unfold folded lines per RFC 5545 (continuation lines start with a single space)
function unfold(lines: string[]): string[] {
    const out: string[] = [];
    for (const line of lines) {
        if (line.startsWith(' ') && out.length) {
            out[out.length - 1] += line.slice(1);
        } else {
            out.push(line);
        }
    }
    return out;
}

type IcsEvent = {
    uid?: string;
    start?: Date;
    end?: Date;
    allDay?: boolean;
    summary?: string;
    location?: string;
    description?: string;
    url?: string;
};

function parseIcsDate(value: string): { date: Date; allDay: boolean } | null {
    // All-day date: YYYYMMDD
    const allDayMatch = /^(\d{4})(\d{2})(\d{2})$/.exec(value);
    if (allDayMatch) {
        const [, y, m, d] = allDayMatch;
        // Create date at local midnight
        return { date: new Date(Number(y), Number(m) - 1, Number(d)), allDay: true };
    }
    // Date-time UTC: YYYYMMDDTHHMMSSZ
    const utcMatch = /^(\d{4})(\d{2})(\d{2})T(\d{2})(\d{2})(\d{2})Z$/.exec(value);
    if (utcMatch) {
        const [, y, m, d, hh, mm, ss] = utcMatch;
        return {
            date: new Date(Date.UTC(Number(y), Number(m) - 1, Number(d), Number(hh), Number(mm), Number(ss))),
            allDay: false
        };
    }
    // Local date-time (no timezone): YYYYMMDDTHHMMSS
    const localMatch = /^(\d{4})(\d{2})(\d{2})T(\d{2})(\d{2})(\d{2})$/.exec(value);
    if (localMatch) {
        const [, y, m, d, hh, mm, ss] = localMatch;
        return {
            date: new Date(Number(y), Number(m) - 1, Number(d), Number(hh), Number(mm), Number(ss)),
            allDay: false
        };
    }
    return null;
}

function parseIcs(text: string): IcsEvent[] {
    const lines = unfold(text.split(/\r?\n/));
    const events: IcsEvent[] = [];
    let current: IcsEvent | null = null;

    for (const raw of lines) {
        if (!raw) continue;
        if (raw === 'BEGIN:VEVENT') {
            current = {};
            continue;
        }
        if (raw === 'END:VEVENT') {
            if (current) events.push(current);
            current = null;
            continue;
        }
        if (!current) continue;

        const sep = raw.indexOf(':');
        if (sep === -1) continue;
        const nameAndParams = raw.slice(0, sep);
        const value = raw.slice(sep + 1);
        const [name, ...params] = nameAndParams.split(';');
        const NAME = name.toUpperCase();

        switch (NAME) {
            case 'UID':
                current.uid = value;
                break;
            case 'SUMMARY':
                current.summary = value.replace(/\\n/g, '\n').replace(/\\,/g, ',');
                break;
            case 'LOCATION':
                current.location = value.replace(/\\n/g, '\n').replace(/\\,/g, ',');
                break;
            case 'DESCRIPTION':
                current.description = value.replace(/\\n/g, '\n').replace(/\\,/g, ',');
                break;
            case 'URL':
                current.url = value;
                break;
            case 'DTSTART':
            case 'DTEND': {
                // detect VALUE=DATE for all-day
                const isAllDay = params.some((p) => p.toUpperCase() === 'VALUE=DATE');
                const parsed = parseIcsDate(value);
                if (parsed) {
                    const d = parsed.date;
                    const allDay = isAllDay || parsed.allDay;
                    if (NAME === 'DTSTART') {
                        current.start = d;
                        current.allDay = allDay;
                    } else {
                        current.end = d;
                        // keep allDay flag if already set
                        current.allDay = current.allDay ?? allDay;
                    }
                }
                break;
            }
        }
    }

    return events;
}

const res = await fetch(ICS_URL);
let events: IcsEvent[] = [];
if (res.ok) {
    const ics = await res.text();
    events = parseIcs(ics)
        .filter((e) => e.start)
        .map((e) => e) as IcsEvent[];
}

// Only upcoming (or ongoing) events
const now = new Date();
const todayMidnight = new Date(now.getFullYear(), now.getMonth(), now.getDate());
events = events.filter((e) => {
    const end = e.end ?? e.start!;
    return end >= todayMidnight;
});

// Sort by start date ascending
events.sort((a, b) => (a.start!.getTime() - b.start!.getTime()));

const dfDate = new Intl.DateTimeFormat('de-DE', { weekday: 'long', day: '2-digit', month: 'long', year: 'numeric' });
const dfTime = new Intl.DateTimeFormat('de-DE', { hour: '2-digit', minute: '2-digit' });

function formatWhen(e: IcsEvent): string {
    const s = e.start!;
    const eEnd = e.end;
    if (e.allDay) {
        if (eEnd && eEnd.getTime() - s.getTime() > 24 * 3600 * 1000) {
            // multi-day all-day spans are common as DTEND exclusive; subtract one day for display
            const inclusiveEnd = new Date(eEnd.getTime() - 1);
            return `${dfDate.format(s)} â€“ ${dfDate.format(inclusiveEnd)}`;
        }
        return `${dfDate.format(s)} (ganztÃ¤gig)`;
    }
    if (eEnd) {
        const sameDay =
            s.getFullYear() === eEnd.getFullYear() &&
            s.getMonth() === eEnd.getMonth() &&
            s.getDate() === eEnd.getDate();
        if (sameDay) {
            return `${dfDate.format(s)}, ${dfTime.format(s)}â€“${dfTime.format(eEnd)}`;
        }
        return `${dfDate.format(s)}, ${dfTime.format(s)} â€“ ${dfDate.format(eEnd)}, ${dfTime.format(eEnd)}`;
    }
    return `${dfDate.format(s)}, ${dfTime.format(s)}`;
}
---

<BaseLayout title="Kalender | Stamm Phoenix" description="Termine und Aktionen des DPSG Stamm Phoenix.">
    <svelte:fragment slot="header"><Header /></svelte:fragment>

    <section class="prose">
        <h1>Kalender</h1>
        <p>Hier finden Sie kommende Aktionen und Termine unseres Stammes.</p>
        <p class="text-sm">
            iCal/ICS abonnieren:
            <a class="underline" href={ICS_URL} rel="nofollow">Kalender-Link</a>
        </p>
    </section>

    {events.length ? (
        <ul class="mt-6 grid gap-6 md:grid-cols-2">
            {events.map((ev) => (
                <li class="rounded-[var(--radius-lg)] border border-[var(--color-neutral-200)] bg-white p-5 shadow-[var(--shadow-soft)] hover:shadow-md transition">
                    <div class="flex flex-col gap-2">
                        <h3 class="text-lg font-semibold text-[var(--color-neutral-900)]">
                            {ev.summary?.replace(/[ðŸŸ ðŸ”µðŸŸ¢ðŸ”´]/g, '') || 'Termin'}
                        </h3>
                        <div class="text-sm text-[var(--color-neutral-700)]">
                            {formatWhen(ev)}
                        </div>
                        {ev.location && (
                            <div class="text-sm text-[var(--color-neutral-700)]">
                                Ort: {ev.location}
                            </div>
                        )}
                        {ev.description && (
                            <p class="text-sm text-[var(--color-neutral-700)] whitespace-pre-line">
                                {ev.description}
                            </p>
                        )}
                        {ev.url && (
                            <div class="pt-1">
                                <a href={ev.url} class="inline-flex items-center rounded-md bg-brand-600 px-3 py-2 text-sm font-semibold text-white shadow hover:bg-brand-500 hover:shadow-md focus-visible:bg-brand-500 transition">
                                    Jetzt Anmelden
                                </a>
                            </div>
                        )}
                    </div>
                </li>
            ))}
        </ul>
    ) : (
        <p class="mt-6 rounded-[var(--radius-md)] border border-[var(--color-neutral-200)] bg-white p-4 shadow-[var(--shadow-soft)]">
            Aktuell sind keine bevorstehenden Termine vorhanden.
        </p>
    )}

    <svelte:fragment slot="footer"><Footer /></svelte:fragment>
</BaseLayout>