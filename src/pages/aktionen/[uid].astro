---
// src/pages/aktionen/[uid].astro
// SSR version - no getStaticPaths needed
import BaseLayout from '../../layouts/BaseLayout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { parseIcs, type IcsEvent } from '../../lib/ics';

const ICS_URL = 'https://kalender.stamm-phoenix.de/aktionen.ics';

// Get the UID from the URL parameter
const { uid } = Astro.params;

if (!uid) {
  return Astro.redirect('/aktionen');
}

// Fetch and parse events at request time
const res = await fetch(ICS_URL);
if (!res.ok) {
  throw new Error(`Failed to fetch calendar: ${res.status} ${res.statusText}`);
}

const ics = await res.text();
const events: IcsEvent[] = parseIcs(ics);

// Find the specific event by UID
const event = events.find((e) => e.uid === uid);

// If event not found, redirect to main calendar page
if (!event) {
  return Astro.redirect('/aktionen');
}

const dfDate = new Intl.DateTimeFormat('de-DE', {
  weekday: 'long',
  day: '2-digit',
  month: 'long',
  year: 'numeric',
});

const dfTime = new Intl.DateTimeFormat('de-DE', {
  hour: '2-digit',
  minute: '2-digit',
});

function formatWhen(e: IcsEvent): string {
  const s = e.start!;
  const eEnd = e.end;
  if (e.allDay) {
    if (eEnd && eEnd.getTime() - s.getTime() > 24 * 3600 * 1000) {
      // multi-day all-day spans are common as DTEND exclusive; subtract one day for display
      const inclusiveEnd = new Date(eEnd.getTime() - 1);
      return `${dfDate.format(s)} – ${dfDate.format(inclusiveEnd)}`;
    }
    return `${dfDate.format(s)} (ganztägig)`;
  }
  if (eEnd) {
    const sameDay =
      s.getFullYear() === eEnd.getFullYear() &&
      s.getMonth() === eEnd.getMonth() &&
      s.getDate() === eEnd.getDate();
    if (sameDay) {
      return `${dfDate.format(s)}, ${dfTime.format(s)}–${dfTime.format(eEnd)}`;
    }
    return `${dfDate.format(s)}, ${dfTime.format(s)} – ${dfDate.format(eEnd)}, ${dfTime.format(eEnd)}`;
  }
  return `${dfDate.format(s)}, ${dfTime.format(s)}`;
}

// Determine which groups this event is for
const eventGroups = [];
if (event.summary?.includes('🟠')) eventGroups.push('Wölflinge');
if (event.summary?.includes('🔵')) eventGroups.push('Jungpfadfinder');
if (event.summary?.includes('🟢')) eventGroups.push('Pfadfinder');
if (event.summary?.includes('🔴')) eventGroups.push('Rover');

const pageTitle = event.summary?.replace(/[🟠🔵🟢🔴]/g, '').trim() || 'Termin';
const pageDescription = event.description || `${pageTitle} - ${formatWhen(event)}`;
---

<BaseLayout title={`${pageTitle} | Stamm Phoenix`} description={pageDescription}>
  <svelte:fragment slot="header"><Header /></svelte:fragment>

  {/* Back navigation */}
  <nav class="mb-6">
    <a 
      href="/aktionen" 
      class="inline-flex items-center text-sm text-brand-600 hover:text-brand-500 transition"
    >
      ← Zurück zum Kalender
    </a>
  </nav>

  <article class="prose dark:prose-invert max-w-none">
    <header class="mb-8">
      <h1 class="text-3xl font-bold text-[var(--color-neutral-900)] mb-2">
        {pageTitle}
      </h1>
      
      {/* Event groups badges */}
      {eventGroups.length > 0 && (
        <div class="flex flex-wrap gap-2 mb-4">
          {eventGroups.map((group) => (
            <span class="inline-flex items-center rounded-full bg-brand-100 px-3 py-1 text-xs font-medium text-brand-800">
              {group === 'Wölflinge' && '🟠 '}
              {group === 'Jungpfadfinder' && '🔵 '}
              {group === 'Pfadfinder' && '🟢 '}
              {group === 'Rover' && '🔴 '}
              {group}
            </span>
          ))}
        </div>
      )}

      {/* Date and time */}
      <div class="text-lg text-[var(--color-neutral-700)] mb-2">
        📅 {formatWhen(event)}
      </div>

      {/* Location */}
      {event.location && (
        <div class="text-lg text-[var(--color-neutral-700)] mb-4">
          📍 {event.location}
        </div>
      )}
    </header>

    {/* Event description */}
    {event.description && (
      <div class="mb-8">
        <h2 class="text-xl font-semibold mb-4">Beschreibung</h2>
        <div class="whitespace-pre-line text-[var(--color-neutral-700)]">
          {event.description}
        </div>
      </div>
    )}

    {/* Registration/Info link */}
    {event.url && (
      <div class="mt-8">
        <a
          href={event.url}
          target="_blank"
          rel="noopener noreferrer"
          class="inline-flex items-center rounded-md bg-brand-600 px-4 py-3 text-sm font-semibold text-white shadow hover:bg-brand-500 transition"
        >
          Weitere Informationen / Anmeldung
          <svg class="ml-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
          </svg>
        </a>
      </div>
    )}

    {/* Event metadata */}
    <div class="mt-12 pt-8 border-t border-[var(--color-neutral-200)]">
      <h3 class="text-lg font-semibold mb-4">Event-Details</h3>
      <dl class="grid grid-cols-1 gap-4 sm:grid-cols-2">
        <div>
          <dt class="font-medium text-[var(--color-neutral-900)]">Event-ID</dt>
          <dd class="mt-1 text-sm text-[var(--color-neutral-700)] font-mono">{event.uid}</dd>
        </div>
        {event.organizer && (
          <div>
            <dt class="font-medium text-[var(--color-neutral-900)]">Veranstalter</dt>
            <dd class="mt-1 text-sm text-[var(--color-neutral-700)]">{event.organizer}</dd>
          </div>
        )}
        {event.created && (
          <div>
            <dt class="font-medium text-[var(--color-neutral-900)]">Erstellt am</dt>
            <dd class="mt-1 text-sm text-[var(--color-neutral-700)]">
              {dfDate.format(event.created)}
            </dd>
          </div>
        )}
        {event.lastModified && (
          <div>
            <dt class="font-medium text-[var(--color-neutral-900)]">Zuletzt geändert</dt>
            <dd class="mt-1 text-sm text-[var(--color-neutral-700)]">
              {dfDate.format(event.lastModified)}
            </dd>
          </div>
        )}
      </dl>
    </div>
  </article>

  <svelte:fragment slot="footer"><Footer /></svelte:fragment>
</BaseLayout>